/*
 * S2E Selective Symbolic Execution Framework
 *
 * Copyright (c) 2010, Dependable Systems Laboratory, EPFL
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Dependable Systems Laboratory, EPFL nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE DEPENDABLE SYSTEMS LABORATORY, EPFL BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Currently maintained by:
 *    Vitaly Chipounov <vitaly.chipounov@epfl.ch>
 *    Volodymyr Kuznetsov <vova.kuznetsov@epfl.ch>
 *
 * All contributors are listed in S2E-AUTHORS file.
 *
 */

#ifndef S2E_PLUGINS_EXPLOIT_H
#define S2E_PLUGINS_EXPLOIT_H

#include <s2e/Plugin.h>
#include <s2e/Plugins/CorePlugin.h>
#include <s2e/S2EExecutionState.h>
//#include <string>

namespace s2e {
namespace plugins {

class Exploit : public Plugin
{
    S2E_PLUGIN
public:
    Exploit(S2E* s2e): Plugin(s2e) {num=0;}

    void initialize();
    //void slotTranslateBlockStart(ExecutionSignal*, S2EExecutionState *state, 
    //    TranslationBlock *tb, uint64_t pc);
    //void slotExecuteBlockStart(S2EExecutionState* state, uint64_t pc);
    void onCourruptEip(S2EExecutionState *s, klee::ref<klee::Expr> value);
    bool insertShellcode(S2EExecutionState *s);
    std::vector<std::pair<uint32_t,uint32_t> > searchStack(S2EExecutionState *s);
    std::vector<std::pair<uint32_t,uint32_t> > searchHeap(S2EExecutionState *s);
    std::vector<std::pair<uint32_t,uint32_t> > searchDown2Up(S2EExecutionState *s, uint32_t start, uint32_t end);
    std::vector<std::pair<uint32_t,uint32_t> > searchDataOrHeap(S2EExecutionState *s, bool which);
    inline uint32_t expr2uint32(klee::ref<klee::Expr> expr);
    std::vector<unsigned char> getShellcode(S2EExecutionState *s, std::string shellcode);
    int testShellcode(S2EExecutionState *s, uint32_t address, std::vector<unsigned char> shellcode, klee::ConstraintManager cm, klee::ref<klee::Expr> tainted_ptr, uint32_t nop_end, unsigned char nop_value);
    bool testPointer(S2EExecutionState *s, klee::ConstraintManager cm, klee::ref<klee::Expr> target_ptr, uint32_t value);
    int testAndGetNopSize(S2EExecutionState *s, klee::ConstraintManager cm, uint32_t start, uint32_t end, unsigned char nop_value, klee::ref<klee::Expr> tainted_ptr);
    void addConstraints(S2EExecutionState *s, uint32_t address, std::vector<unsigned char> shellcode, klee::ref<klee::Expr> tainted_ptr,unsigned char nop_value, int nop_size);
    int getMaxNopAndAddr(S2EExecutionState *s, std::vector<unsigned char> shellCodeVector, std::vector<std::pair<uint32_t,uint32_t> > sym_table, klee::ref<klee::Expr> tainted_ptr, unsigned char nop_value, const char where[], uint32_t *address);

private:
    typedef std::pair<std::string, std::vector<unsigned char> > VarValuePair;
    typedef std::vector<VarValuePair> ConcreteInputs;                        

    //bool m_traceBlockTranslation;
    //bool m_traceBlockExecution;

    klee::ref<klee::Expr> eip_value;   

    uint32_t tainted_address;
    //uint64_t tainted_value;
    std::string shellcode;
    int type;
    int num;
};

} // namespace plugins
} // namespace s2e

#endif // S2E_PLUGINS_EXPLOIT_H
